package com.sefaz.test;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Base64;
import java.util.zip.GZIPInputStream;

import org.junit.jupiter.api.Test;

class Base64Test {

	private final String base64Text = "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";

	@Test
	void encode() {
		String originalInput = "test input";
		String encodedString = Base64.getEncoder().encodeToString(originalInput.getBytes());
		assertEquals("dGVzdCBpbnB1dA==", encodedString);
	}

	@Test
	void decodeAndDecodeFromGzip() throws IOException {

		// convert the bytes from base64 to normal string
		byte[] compressed = Base64.getDecoder().decode(base64Text.getBytes());

		try (ByteArrayInputStream is = new ByteArrayInputStream(compressed);

				GZIPInputStream gis = new GZIPInputStream(is);) {

			StringBuilder string = new StringBuilder();

			byte[] buffer = new byte[2048];

			int byteRead;

			while ((byteRead = gis.read(buffer)) != -1) {
				System.out.println("oi");
				string.append(new String(buffer, 0, byteRead));
			}
		}
	}

}
