package com.sefaz.test;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Base64;
import java.util.zip.GZIPInputStream;

import org.junit.jupiter.api.Test;

class Base64Test {

	private final String base64Text = "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";

	@Test
	void encode() {
		String originalInput = "test input";
		String encodedString = Base64.getEncoder().encodeToString(originalInput.getBytes());
		assertEquals("dGVzdCBpbnB1dA==", encodedString);
	}

	@Test
	void decodeAndDecodeFromGzip() throws IOException {

		// convert the bytes from base64 to normal string
		byte[] compressed = Base64.getDecoder().decode(base64Text);

		try (ByteArrayInputStream is = new ByteArrayInputStream(compressed);

				GZIPInputStream gis = new GZIPInputStream(is);) {

			StringBuilder string = new StringBuilder();

			byte[] buffer = new byte[2048];

			int byteRead;

			while ((byteRead = gis.read(buffer)) != -1) {
				System.out.println("oi");
				string.append(new String(buffer, 0, byteRead));
			}
		}
	}

}
